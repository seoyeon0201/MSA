## Network 생성

⭐️ 하나의 network 내에 존재하는 container는 IP address 뿐 아니라 <span style="color:indianred">container ID</span> 또는 <span style="color:indianred">container Name</span>으로도 접근 가능

`docker network create --gateway 172.18.0.1 --subnet 172.18.0.0/16 cowork-network`

## 컨테이너화란,

- (Image 존재하는 경우) `docker run`으로<span style="color:indianred"> Container 생성</span>

  - `docker run`은 image container 생성 & 시작 동시에 진행

  - `docker create`는 docker container 생성

  - `docker start`는 docker container 시작

- (Image 존재하지 않는 경우) 명령어로 <span style="color:indianred">Docker Image 생성</span> & <span style="color:indianred">Docker Container 생성</span>

  - **Docker Image 생성**

    - (필요한 경우) 코드 수정

    - Dockerfile 파일 생성

    - `docker build` 명령어로 Image 생성

  - **Docker Container 생성**

    - `docker create`, `docker start`, `docker run`

## RabbitMQ

✔️ 사용할 Image 기존 존재

`docker run -d --name rabbitmq --network cowork-network -p 15672:15672 -p 5672:5672 -p 15671:15671 -p 5671:5671 -p 4369:4369 -e RABBITMQ_DEFAULT_USER=guest -e RABBITMQ_DEFAULT_PASS=guest rabbitmq:management`

- `docker run` : 컨테이너 생성 + 실행 (이미지가 없는 경우 다운로드까지도)

- `-d` : 백그라운드에서 실행

- `--name rabbitmq` : 컨테이너 이름 rabbitmq

- `--network ecommerce-network` : docker network 지정해 container 생성

- `-p 15672:15672 -p 5672:5672 -p 15671:15671 -p 5671:5671 -p 4369:4369` : RabbitMQ 컨테이너 포트(: 뒤)와 Host OS 포트(: 앞) 포트 포워딩

- `-e RABBITMQ_DEFAULT_USER=guest -e RABBITMQ_DEFAULT_PASS=guest` : 환경 변수로 RabbitMQ 접속하기 위한 user와 password 설정

- `rabbitmq:management` : 호출하고자 하는 이미지 이름. docker 실행 시 rabbitmq:management 태그를 갖는 이미지 다운로드 후 컨테이너 생성 및 실행

## Config Server

✔️ **Docker Image 생성** - IntelliJ

1. `build.gradle` 코드 수정

```
version = 1.0   //기존: version = '0.0.1-SNAPSHOT'

//아래 코드 추가
jar {
    archiveFileName = 'ConfigService.jar'
    version = '1.0.0'
}
```

2. `application.yml` 수정

```
spring:
  application:
    name: config-service

  //rabbitmq 추가
  rabbitmq:
    host: 127.0.0.1
    port: 5672

    username: guest
    password: guest
```

3. `Dockerfile` 생성

```
FROM openjdk:17-ea-11-jdk-slim
VOLUME /tmp
COPY build/libs/*.jar ConfigService.jar
ENTRYPOINT ["java","-jar","ConfigService.jar"]
```

4. IntelliJ terminal에서 `./gradlew build` 또는 `./gradlew build -x test`로 프로젝트 빌드

-> 이때 build/libs 아래에 ConfigService.jar 생성

5. `docker build -t parkseoyeon/config-service:1.0 .` 명령어로 `docker image 생성`

✔️ **Docker Container 생성&실행** - Windows Powershell

`docker run -d -p 8888:8888 --network cowork-network -e "spring.rabbitmq.host=rabbitmq" -e "spring.profiles.active=default" --name config-service parkseoyeon/config-service:1.0` 명령어로 `docker container 생성`

**✔️ 정상 동작 확인**

브라우저에 `http://127.0.0.1:8888/user-service/default` 넣어 확인

![Alt text](image-1.png)

## Eureka Discovery Service

**✔️ Docker Image 생성**

1. `build.gradle` 코드 수정

```
version = 1.0 //기존: version = '0.0.1-SNAPSHOT'

//아래 코드 추가
jar {
    archiveFileName = 'DiscoveryService.jar'
    version = '1.0.0'
}
```

2. `application.yml` 수정

```
spring:
    application:
        name: discovery-service
    //config 정보를 사용하려면 필요하므로 추가
    cloud:
        config:
            uri: http://127.0.0.1:8888
            name: application
```

3. Dockerfile 작성

```
FROM openjdk:17-ea-11-jdk-slim
VOLUME /tmp
COPY build/libs/*.jar DiscoveryService.jar
ENTRYPOINT ["java","-jar","DiscoveryService.jar"]
```

4. `./gradlew build` 또는 `./gradlew build -x test`로 프로젝트 빌드

5. `docker build --tag parkseoyeon/discovery-service:1.0 .` 명령어로 `docker image 생성`

- 이때 Hub에 업로드 가능: `docker push parkseoyeon/discovery-service:1.0`

**✔️ Docker Container 생성** - Windows Powershell

`docker run -d -p 8761:8761 --network cowork-network -e "spring.cloud.config.uri=http://config-service:8888" --name discovery-service parkseoyeon/discovery-service:1.0`

**✔️ 정상 동작 확인**

브라우저에 `http://127.0.0.1:8761` 입력해 Eureka Server 확인

![Alt text](image.png)

## Apigateway Service

**✔️ Docker Image 생성**

1. `build.gradle` 코드 수정

```
version = 1.0   //기존: version = '0.0.1-SNAPSHOT'

//아래 코드 추가
jar {
    <!-- archiveFileName = 'ApigatewayService.jar' -->
    version = '1.0.0'
}
```

2. `application.yml` 수정

```
server:
  port: 8001

spring:
  application:
    name: gateway-service

  #rabbitmq 정보 추가
  rabbitmq:
    host: 127.0.0.1
    port: 5672
    username: guest
    password: guest

  jpa:
    show-sql: true
    hibernate:
      ddl-auto: none
      naming:
        physical-strategy: org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl
    database-platform: org.hibernate.dialect.MySQLDialect

#아래 코드 추가
eureka:
  client:
    service-url:
      defaultZone: http://localhost:8761/eureka
```

3. Dockerfile 작성

```
FROM openjdk:17-ea-11-jdk-slim
VOLUME /tmp
COPY build/libs/*.jar ApigatewayService.jar
ENTRYPOINT ["java","-jar","ApigatewayService.jar"]
```

4. `./gradlew build` 또는 `./gradlew build -x test`

5. `docker build --tag parkseoyeon/apigateway-service:1.0 .` 명령어로 docker image 생성

- `docker push parkseoyeon/apigateway-service:1.0`로 Hub에 저장

**✔️ Docker Container 생성&실행**

`docker run -d -p 8001:8001 --network cowork-network -e "spring.cloud.config.uri=http://config-service:8888" -e "spring.rabbitmq.host=rabbitmq" -e "eureka.client.serviceUrl.defaultZone=http://discovery-service:8761/eureka/" --name apigateway-service parkseoyeon/apigateway-service:1.0`

## Calendar service

**✔️ Docker Image 생성**

1. `build.gradle` 코드 수정

```
version = 1.0   //기존: version = '0.0.1-SNAPSHOT'

//아래 코드 추가
jar {
    archiveFileName = 'CalendarService.jar'
    version = '1.0.0'
}
```

2. `application.yml` 수정

```
server:
  port: 0

spring:
//rabbitmq 정보 추가
  rabbitmq:
    host: 127.0.0.1
    port: 5672
    username: guest
    password: guest

  application:
    name: calendar-service

  jpa:
    show-sql: true
    hibernate:
      ddl-auto: none
      naming:
        physical-strategy: org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl
    database-platform: org.hibernate.dialect.MySQLDialect

logging:
  level:
    com.example.userservice.client: DEBUG

//eureka 정보 추가
eureka:
  instance:
    instance-id: ${spring.cloud.client.hostname}:${spring.application.instance_id:${random.value}}
  client:
    register-with-eureka: true
    fetch-registry: true
    service-url:
      defaultZone: http://localhost:8761/eureka
```

3. Dockerfile 작성

```
FROM openjdk:17-ea-11-jdk-slim
VOLUME /tmp
COPY build/libs/*.jar CalendarService.jar
ENTRYPOINT ["java","-jar","CalendarService.jar"]
```

4. `./gradlew build` 또는 `./gradlew build -x test`로 프로젝트 빌드

5. `docker build --tag parkseoyeon/calendar-service:1.0 .`

- `docker push parkseoyeon/calendar-service:1.0`로 Hub에 저장

**✔️ Docker Container 생성&실행** - Windows Powershell

`docker run -d --network cowork-network -e "spring.cloud.config.uri=http://config-service:8888" -e "spring.rabbitmq.host=rabbitmq" -e "eureka.client.serviceUrl.defaultZone=http://discovery-service:8761/eureka/" --name calendar-service parkseoyeon/calendar-service:1.0`

## Dashboard service

**✔️ Docker Image 생성**

1. `build.gradle` 코드 수정

```
version = 1.0   //기존: version = '0.0.1-SNAPSHOT'

//아래 코드 추가
jar {
    archiveFileName = 'DashboardService.jar'
    version = '1.0.0'
}
```

2. `application.yml` 수정

```
server:
  port: 0

spring:
//rabbitmq 정보 추가
  rabbitmq:
    host: 127.0.0.1
    port: 5672
    username: guest
    password: guest
  application:
    name: dashboard-service

  jpa:
    show-sql: true
    hibernate:
      ddl-auto: none
      naming:
        physical-strategy: org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl
    database-platform: org.hibernate.dialect.MySQLDialect

logging:
  level:
    com.example.userservice.client: DEBUG

//eureka 정보 추가
eureka:
  instance:
    instance-id: ${spring.cloud.client.hostname}:${spring.application.instance_id:${random.value}}
  client:
    register-with-eureka: true
    fetch-registry: true
    service-url:
      defaultZone: http://localhost:8761/eureka
```

3. Dockerfile 작성

```
FROM openjdk:17-ea-11-jdk-slim
VOLUME /tmp
COPY build/libs/*.jar DashboardService.jar
ENTRYPOINT ["java","-jar","DashboardService.jar"]
```

4. `./gradlew build` 또는 `./gradlew build -x test`로 프로젝트 빌드

5. `docker build --tag parkseoyeon/dashboard-service:1.0 .` 명령어로 docker image 생성

- `docker push parkseoyeon/apigateway-service:1.0`로 Hub에 저장

**✔️ Docker Container 생성&실행** - Windows Powershell

`docker run -d --network cowork-network -e "spring.cloud.config.uri=http://config-service:8888" -e "spring.rabbitmq.host=rabbitmq" -e "eureka.client.serviceUrl.defaultZone=http://discovery-service:8761/eureka/" --name dashboard-service parkseoyeon/dashboard-service:1.0`로 컨테이너 생성 실행

## UserService

**✔️ Docker Image 생성**

1. `build.gradle` 코드 수정

```
version = 1.0   //기존: version = '0.0.1-SNAPSHOT'

//아래 코드 추가
jar {
    archiveFileName = 'UserService.jar'
    version = '1.0.0'
}
```

2. `application.yml` 수정

```
server:
  port: 0

spring:
//rabbitmq 정보 추가
  rabbitmq:
    host: 127.0.0.1
    port: 5672
    username: guest
    password: guest

  application:
    name: user-service

  jpa:
    show-sql: true
    hibernate:
      ddl-auto: none
      naming:
        physical-strategy: org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl
    database-platform: org.hibernate.dialect.MySQLDialect

logging:
  level:
    com.example.userservice.client: DEBUG

//eureka 정보 추가
eureka:
  instance:
    instance-id: ${spring.cloud.client.hostname}:${spring.application.instance_id:${random.value}}
  client:
    register-with-eureka: true
    fetch-registry: true
    service-url:
      defaultZone: http://localhost:8761/eureka
```

3. Dockerfile 작성

```
FROM openjdk:17-ea-11-jdk-slim
VOLUME /tmp
COPY build/libs/*.jar UserService.jar
ENTRYPOINT ["java","-jar","UserService.jar"]
```

4. `./gradlew build` 또는 `./gradlew build -x test`로 프로젝트 빌드

5. `docker build --tag parkseoyeon/user-service:1.0 .` 명령어로 docker image 생성

- `docker push parkseoyeon/user-service:1.0`로 Hub에 저장

**✔️ Docker Container 생성&실행** - Windows Powershell

`docker run -d --network cowork-network -e "spring.cloud.config.uri=http://config-service:8888" -e "spring.rabbitmq.host=rabbitmq" -e "eureka.client.serviceUrl.defaultZone=http://discovery-service:8761/eureka/" --name user-service parkseoyeon/user-service:1.0`로 컨테이너 생성 실행

## BoardService

**✔️ Docker Image 생성**

1. `build.gradle` 코드 수정

```
version = 1.0   //기존: version = '0.0.1-SNAPSHOT'

//아래 코드 추가
jar {
    archiveFileName = 'BoardService.jar'
    version = '1.0.0'
}
```

2. `application.yml` 수정

```
server:
  port: 0

spring:
//rabbitmq 정보 추가
  rabbitmq:
    host: 127.0.0.1
    port: 5672
    username: guest
    password: guest

  application:
    name: board-service

  jpa:
    show-sql: true
    hibernate:
      ddl-auto: none
      naming:
        physical-strategy: org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl
    database-platform: org.hibernate.dialect.MySQLDialect

logging:
  level:
    com.example.userservice.client: DEBUG

//eureka 정보 추가
eureka:
  instance:
    instance-id: ${spring.cloud.client.hostname}:${spring.application.instance_id:${random.value}}
  client:
    register-with-eureka: true
    fetch-registry: true
    service-url:
      defaultZone: http://localhost:8761/eureka
```

3. Dockerfile 작성

```
FROM openjdk:17-ea-11-jdk-slim
VOLUME /tmp
COPY build/libs/*.jar BoardService.jar
ENTRYPOINT ["java","-jar","BoardService.jar"]
```

4. `./gradlew build` 또는 `./gradlew build -x test`로 프로젝트 빌드

5. `docker build --tag parkseoyeon/board-service:1.0 .` 명령어로 docker image 생성

- `docker push parkseoyeon/board-service:1.0`로 Hub에 저장

**✔️ Docker Container 생성&실행** - Windows Powershell

`docker run -d --network cowork-network -e "spring.cloud.config.uri=http://config-service:8888" -e "spring.rabbitmq.host=rabbitmq" -e "eureka.client.serviceUrl.defaultZone=http://discovery-service:8761/eureka/" --name board-service parkseoyeon/board-service:1.0`로 컨테이너 생성 실행

## Work :Node.js

**✔️ Docker Image 생성**

1. 코드 수정

- `env` 환경 변수 파일 추가

- `eureka-helper.js` 코드 수정

```
const Eureka = require('eureka-js-client').Eureka;
const eurekaHost = process.env.EUREKA_SERVER;
const eurekaPort = 8761;
const hostName = 'work-service';
const ipAddr = '127.0.0.1';
const appName = 'work-service';
const PORT = 3000;

const client = new Eureka({
  // application instance information
  instance: {
    app: appName,
    hostName: hostName,
    ipAddr: ipAddr,
    port: {
      '$' : PORT,
      '@enabled' : 'true',
    },
    vipAddress: appName,
    dataCenterInfo: {
      '@class': 'com.netflix.appinfo.InstanceInfo$DefaultDataCenterInfo',
      name: 'MyOwn',
    },
  },
  eureka: {
    // eureka server host / port
    host: eurekaHost,
    port: eurekaPort,
    servicePath: '/eureka/apps',
    maxRetries: 10,
    requestRetryDelay: 2000,
  },
});

function exitHandler(options, exitCode) {
  if (options.cleanup) {
  }
  if (exitCode || exitCode === 0) console.log(exitCode);
  if (options.exit) {
      client.stop();
  }
}

client.on('deregistered', () => {
  console.log('after deregistered');
  process.exit();
})

client.on('started', () => {
  console.log("eureka host  " + eurekaHost);
})

process.on('SIGINT', exitHandler.bind(null, {exit:true}));

module.exports = client;
```

2. Dockerfile 작성

```
FROM node

#작업 디렉토리 설정. 이 디렉토리에서 어플리케이션을 실행하고 종속성을 설치한다.
WORKDIR /usr/src/app

#npm install의 정상 수행을 위해, 그 전에 컨테이너 내부에 패키지 모듈 명세 파일 복사 (종속성 파일 복사)
COPY package*.json ./

#도커 서버가 수행할 커맨드 추가 (필요한 종속성 설치)
RUN npm install

#package.json 외에 어플리케이션 소스 코드 복사
COPY . .

#컨테이너가 실행될 포트 설정
EXPOSE 3000

#컨테이너가 실행될 때 1번만 수행되는 {시작 명령어} 자리에 들어갈 커맨드
CMD ["npm", "start"]
```

3. `docker build -t parkseoyeon/work-service:1.0 .` 명령어로 docker image 생성

- `docker push parkseoyeon/work-service:1.0` 명령어로 docker hub 사이트에 업로드

**✔️ Docker Container 생성&실행** - Windows Powershell

```
docker run -d -p 3000:3000 --network cowork-network\
	         -e "EUREKA_SERVER=discovery-service"\
					 --name work-service parkseoyeon/work-service:1.0
```

## Eureka Server

`http://127.0.0.1:8761/`에 work 추가

![Alt text](image-2.png)

- 추후 Ingress 써서 배포해볼 것


## MSA 쿠버네티스 배포 참고 영상

<https://forward.nhn.com/2022/sessions/31>

## 최종

### calendar-service:2.0 Docker imag

`application.yml`

- spring.cloud.client.hostname: ${HOSTNAME} 추가

- eureka.instance.hostname: ${HOSTNAME} 추가

- 전체 코드

```
server:
  #기존
  #port: 0
  port: 5001

spring:
  rabbitmq:
    host: 127.0.0.1
    port: 5672
    username: guest
    password: guest

  application:
    name: calendar-service

  jpa:
    show-sql: true
    hibernate:
      ddl-auto: none
      naming:
        physical-strategy: org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl
    database-platform: org.hibernate.dialect.MySQLDialect

  #추가
  cloud:
    client:
      hostname: ${HOSTNAME}

logging:
  level:
    com.example.userservice.client: DEBUG

eureka:
  instance:
    #아래 한줄 추가
    hostname: ${HOSTNAME}

    instance-id: ${spring.cloud.client.hostname}:${spring.application.instance_id:${random.value}}
  client:
    register-with-eureka: true
    fetch-registry: true
    service-url:
      defaultZone: http://localhost:8761/eureka

```

접근

- POSTMAN: `http://192.168.23.212:32061/calendar-service/calendars/minutes/all/2`

  - Internal Server Error

- curl 명령어: `curl http://10.244.1.75:5001/calendars/minutes/all/2`

  - 직접 접근했으므로 정상 동작

![Alt text](image-13.png)

### calendar-service:3.0 Docker imag

`application.yml`

(calendar-service:2.0 이어서)

- eureka.instance.prefer-ip-address: true

```

```

## calendar-service:4.0 Docker image

- 아래 코드 추가

`application.yml`

```
eureka:
  instance:
    #아래 두줄 추가
    hostname: calendar-service-0.default.svc.cluster.local
```

## dashboard-service:2.0 & 3.0 Docker image

- eureka.instance.hostname: dashboard-service로 설정

- eureka.instance.instance-id 주석처리

`application.yml`

```
server:
  port: 0

spring:
  rabbitmq:
    host: 127.0.0.1
    port: 5672
    username: guest
    password: guest
  application:
    name: dashboard-service

  jpa:
    show-sql: true
    hibernate:
      ddl-auto: none
      naming:
        physical-strategy: org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl
    database-platform: org.hibernate.dialect.MySQLDialect

logging:
  level:
    com.example.userservice.client: DEBUG

eureka:
  instance:
    hostname: dashboard-service
    #instance-id: ${spring.cloud.client.hostname}:${spring.application.instance_id:${random.value}}
  client:
    register-with-eureka: true
    fetch-registry: true
    service-url:
      defaultZone: http://localhost:8761/eureka
```